Configuration-Structure-Schema DEFINITIONS AUTOMATIC TAGS ::= BEGIN
   Range ::= SEQUENCE {
      start INTEGER,
      length INTEGER
   }
   FlexibleRange ::= SEQUENCE {
      single SEQUENCE OF INTEGER OPTIONAL,
      start SEQUENCE OF INTEGER OPTIONAL,
      end SEQUENCE OF INTEGER OPTIONAL,
      ...
   }
   HartExtension ::= CHOICE {
         debug Debug,
         isa Isa,
         privileged Privileged,
         clic Clic,
         fastInt FastInt,
         ...
   }
   Hart ::= SEQUENCE {
      hartid FlexibleRange,
      extension SEQUENCE OF HartExtension OPTIONAL,
      ...
   }
   Tuple ::= SEQUENCE {
      value INTEGER,
      mask INTEGER
   }
   Triple ::= SEQUENCE {
      low INTEGER,
      high INTEGER,
      mask INTEGER
   }
   PossibleValues ::= SEQUENCE {
      tuple SEQUENCE OF Tuple OPTIONAL,
      triple SEQUENCE OF Triple OPTIONAL,
      ...
   }
   Configuration ::= SEQUENCE {
      harts SEQUENCE OF Hart OPTIONAL,
      debugModule SEQUENCE OF DebugModule OPTIONAL,
      traceModule TraceModule OPTIONAL,
      physicalMemory SEQUENCE OF PhysicalMemory OPTIONAL,
      ...
   }
   DebugTriggerMcontrol ::= SEQUENCE {
      maskmax INTEGER,
      hit BOOLEAN,
      addressMatch BOOLEAN,
      dataMatch BOOLEAN,
      timingBefore BOOLEAN,
      timingAfter BOOLEAN,
      sizeAny BOOLEAN,
      sizeS8 BOOLEAN,
      sizeS16 BOOLEAN,
      sizeS32 BOOLEAN,
      sizeS64 BOOLEAN,
      sizeS80 BOOLEAN,
      sizeS96 BOOLEAN,
      sizeS112 BOOLEAN,
      sizeS128 BOOLEAN,
      actionMmode BOOLEAN,
      actionDmode BOOLEAN,
      chain BOOLEAN,
      matchEqual BOOLEAN,
      matchNapot BOOLEAN,
      matchGreaterEqual BOOLEAN,
      matchLess BOOLEAN,
      matchLowMask BOOLEAN,
      matchHighMask BOOLEAN,
      matchNotEqual BOOLEAN,
      matchNotNapot BOOLEAN,
      matchNotLowMask BOOLEAN,
      matchNotHighMask BOOLEAN,
      m BOOLEAN,
      s BOOLEAN,
      u BOOLEAN,
      execute BOOLEAN,
      store BOOLEAN,
      load BOOLEAN
   }
   DebugTrigger ::= SEQUENCE {
      index FlexibleRange,
      mcontrol SEQUENCE OF DebugTriggerMcontrol OPTIONAL,
      ...
   }
   AccessRegisterCommand ::= SEQUENCE {
      aarsize32 BOOLEAN,
      aarsize64 BOOLEAN,
      aarsize128 BOOLEAN,
      aarpostincrementSupported BOOLEAN,
      postexecSupported BOOLEAN,
      regno FlexibleRange
   }
   AccessMemoryCommand ::= SEQUENCE {
      aamvirtual0 BOOLEAN,
      aamvirtual1 BOOLEAN,
      aamsize8 BOOLEAN,
      aamsize16 BOOLEAN,
      aamsize32 BOOLEAN,
      aamsize64 BOOLEAN,
      aamsize128 BOOLEAN,
      aampostincrementSupported BOOLEAN,
      writeSupported BOOLEAN,
      readSupported BOOLEAN
   }
   AbstractCommand ::= SEQUENCE {
      accessRegister SEQUENCE OF AccessRegisterCommand OPTIONAL,
      quickAccess SEQUENCE OF BOOLEAN OPTIONAL,
      accessMemory SEQUENCE OF AccessMemoryCommand OPTIONAL,
      ...
   }
   DebugModule ::= SEQUENCE {
      index INTEGER OPTIONAL,
      abstract AbstractCommand OPTIONAL,
      connectedHarts FlexibleRange OPTIONAL,
      ...
   }
   Debug ::= SEQUENCE {
      trigger SEQUENCE OF DebugTrigger OPTIONAL,
      ...
   }
   Isa ::= SEQUENCE {
      riscv32 BOOLEAN OPTIONAL,
      riscv64 BOOLEAN OPTIONAL,
      riscv128 BOOLEAN OPTIONAL,
      ...
   }
   PrivModes ::= SEQUENCE {
      u BOOLEAN,
      m BOOLEAN,
      s BOOLEAN
   }
   PrivSatps ::= SEQUENCE {
      sv32 BOOLEAN,
      sv39 BOOLEAN,
      sv48 BOOLEAN,
      sv57 BOOLEAN,
      sv64 BOOLEAN
   }
   Privileged ::= SEQUENCE {
      modes PrivModes OPTIONAL,
      satps PrivSatps OPTIONAL,
      epmp BOOLEAN OPTIONAL,
      ...
   }
   Clic ::= SEQUENCE {
      mTimeRegisterAddress INTEGER OPTIONAL,
      mTimeCompareRegisterAddress INTEGER OPTIONAL,
      ...
   }
   FastInterruptModule ::= SEQUENCE {
      index SEQUENCE OF Range OPTIONAL,
      connectedHarts SEQUENCE OF Range OPTIONAL,
      ...
   }
   TraceModule ::= SEQUENCE {
      branchPredictorEntries INTEGER OPTIONAL,
      jumpTargetCacheEntries INTEGER OPTIONAL,
      contextBusWidth INTEGER OPTIONAL,
      ...
   }
   PhysicalMemory ::= SEQUENCE {
      address SEQUENCE OF Range,
      cacheable BOOLEAN OPTIONAL,
      lrScSupported BOOLEAN OPTIONAL,
      ...
   }
   FastInt ::= SEQUENCE {
      mModeTimeRegAddr INTEGER OPTIONAL,
      mModeTimeCompRegAddr INTEGER OPTIONAL,
      ...
   }
END

